#+title: [Notes] USB device sharing over IP
#+date: <2020-09-13>
#+filetags: kernel usbip
#+setupfile: ../org-templates/post.org
#+setupfile: ../org-templates/latex-pdf.org
#+LaTeX_HEADER: \lhead{USBIP}
#+LaTeX_HEADER: \usepackage[a4paper, landscape, margin=0.5in, top=1in, bottom=1in]{geometry}

** Introduction
   Since its introduction in the Linux kernel in [[https://kernelnewbies.org/Linux_3.17#USB_device_sharing_over_IP][v3.17]], I'm not sure why this
   feature is not so popular(or is it only me who was not aware of it until
   now). Anyways, I decided to test the *USB device sharing over IP*. This
   feature will share the USB devices which are attached to a remote system over
   the network as if the device is locally attached to the system. To test this
   functionality, I've attached my 2TB Seagate drive to the Raspberry Pi(Server) and I
   want it available on my Fedora system(Client) as if the drive is locally attached.

   Here's the output of the =lsusb= command,
   #+BEGIN_SRC shell -n
     Bus 001 Device 004: ID 0bc2:ab21 Seagate RSS LLC Backup Plus Slim
     Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter
     Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. SMC9514 Hub
     Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
   #+END_SRC

   #+CAPTION: Layout.
   #+ATTR_HTML: :class center
   #+ATTR_HTML: :width 100% :height
   [[file:images/posts/usbip/layout.png]]

** Server
   On the server side, update the kernel version to 3.17 or later, install
   =usbip= package and enable the =usbip-core= and =usbip-host= kernel modules.
   #+BEGIN_SRC shell -n
     sudo apt-get install usbip
     sudo modprobe usbip-core
     sudo modprobe usbip-host
   #+END_SRC

   Or add the modules in =/etc/module= if you want the modules to be available
   after reboot.
   #+BEGIN_SRC shell -n
     cat /etc/modules
     # /etc/modules: kernel modules to load at boot time.
     #
     # This file contains the names of kernel modules that should be loaded
     # at boot time, one per line. Lines beginning with "#" are ignored.

     usbip_core
     usbip_host
   #+END_SRC

   Start the USBIP Daemon process,
   #+BEGIN_SRC shell -n
     sudo usbipd -D --debug
   #+END_SRC

*** Create a systemd service(Optional)
    File: =/lib/systemd/system/usbipd.service=
    #+BEGIN_SRC shell -n
      [Unit]
      Description=usbip host daemon
      After=network.target

      [Service]
      Type=forking
      ExecStart=/usr/sbin/usbipd -D --debug

      [Install]
      WantedBy=multi-user.target
    #+END_SRC

    Enable & start the service,
    #+BEGIN_SRC shell -n
      sudo systemctl enable usbipd
      Created symlink /etc/systemd/system/multi-user.target.wants/usbipd.service → /lib/systemd/system/usbipd.service.

      sudo systemctl start usbipd
      sudo systemctl status usbipd
      ● usbipd.service - usbip host daemon
         Loaded: loaded (/lib/systemd/system/usbipd.service; disabled; vendor preset: enabled)
         Active: active (running) since Sun 2020-09-06 20:35:01 IST; 1s ago
        Process: 1237 ExecStart=/usr/sbin/usbipd -D --debug (code=exited, status=0/SUCCESS)
       Main PID: 1238 (usbipd)
          Tasks: 1 (limit: 1942)
         CGroup: /system.slice/usbipd.service
                 └─1238 /usr/sbin/usbipd -D --debug

      Sep 06 20:35:01 raspberrypi systemd[1]: Starting usbip host daemon...
      Sep 06 20:35:01 raspberrypi usbipd[1238]: usbipd: info: starting usbipd (usbip-utils 2.0)
      Sep 06 20:35:01 raspberrypi usbipd[1238]: usbipd: info: listening on 0.0.0.0:3240
      Sep 06 20:35:01 raspberrypi systemd[1]: Started usbip host daemon.
      Sep 06 20:35:01 raspberrypi usbipd[1238]: usbipd: info: listening on :::3240
    #+END_SRC

   Now list all the available devices using,
   #+BEGIN_SRC shell -l
     sudo usbip list -l
      - busid 1-1.1 (0424:ec00)
        Standard Microsystems Corp. : SMSC9512/9514 Fast Ethernet Adapter (0424:ec00)

      - busid 1-1.2 (0bc2:ab21)
        Seagate RSS LLC : Backup Plus Slim (0bc2:ab21)
   #+END_SRC

   Finally bind the USB device you want to share over the network,
   #+BEGIN_SRC shell -n
     # Syntax: usbip bind <BUS_ID>
     sudo usbip bind -b 1-1.2
     usbip: info: bind device on busid 1-1.2: complete
   #+END_SRC

   /You can unbind using: usbip unbind <BUS_ID>./

   The following are the logs from the server,
   #+BEGIN_SRC shell -n
     [63476.847596] sd 0:0:0:0: [sda] Synchronizing SCSI cache
     [63647.986250] usbip-host 1-1.2: 1-1.2 is not in match_busid table... skip!
     [63647.986370] usbcore: registered new device driver usbip-host
     [63655.533552] usbip-host 1-1.2: usbip-host: register new device (bus 1 dev 4)
     [64026.471984] usbip-host 1-1.2: stub up
     [64026.474776] usbip-host 1-1.2: recv a header, 0
     [64026.573752] usbip-host 1-1.2: reset high-speed USB device number 4 using dwc_otg
     [64026.705758] usbip-host 1-1.2: device reset
     [64038.086388] usbip-host 1-1.2: stub up
     [64038.342024] usbip-host 1-1.2: usb_set_interface done: inf 0 alt 1
   #+END_SRC

** Client
   On the client, also install =usbip= and enable =usbip-core= and =vhci-hcd=
   kernel modules.
   #+BEGIN_SRC shell -n
     sudo dnf install usbip
     sudo modprobe usbip-core
     sudo modprobe vhci-hcd
   #+END_SRC

   List the devices offered by the the server(Raspberry Pi in my case),
   #+BEGIN_SRC shell -n
     usbip list --remote=192.168.0.162
     Exportable USB devices
     ======================
      - 192.168.0.162
           1-1.2: Seagate RSS LLC : Backup Plus Slim (0bc2:ab21)
                : /sys/devices/platform/soc/3f980000.usb/usb1/1-1/1-1.2
                : (Defined at Interface level) (00/00/00)
   #+END_SRC

   Attach the device,
   #+BEGIN_SRC shell -n
     # Syntax: usbip attach --remote/-r <SERVER_IP_ADDRESS> -b <BUS_ID>
     sudo usbip attach -r 192.168.0.162 -b 1-1.2

     lsusb
     # Output
     Bus 006 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
     Bus 005 Device 003: ID 0bc2:ab21 Seagate RSS LLC Backup Plus Slim
     Bus 005 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
     Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
     Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
     Bus 002 Device 029: ID 17ef:3082 Lenovo USB3.1 Hub
     Bus 002 Device 028: ID 17ef:307f Lenovo
     Bus 002 Device 027: ID 17ef:307f Lenovo USB3.1 Hub
     Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
     Bus 001 Device 002: ID 13d3:56bc IMC Networks Integrated Camera
     Bus 001 Device 095: ID 046d:c534 Logitech, Inc. Unifying Receiver
     Bus 001 Device 092: ID 2109:8818 VIA Labs, Inc.
     Bus 001 Device 089: ID 0403:6001 Future Technology Devices International, Ltd FT232 Serial (UART) IC
     Bus 001 Device 094: ID 2109:8818 VIA Labs, Inc.
     Bus 001 Device 093: ID 17ef:3083 Lenovo USB2.0 Hub
     Bus 001 Device 090: ID 17ef:3081 Lenovo
     Bus 001 Device 088: ID 17ef:3080 Lenovo
     Bus 001 Device 087: ID 17ef:3080 Lenovo USB2.0 Hub
     Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub
   #+END_SRC

   #+CAPTION: Notice the Seagate Drive available in the Gnome File Manager.
   #+ATTR_HTML: :class center
   #+ATTR_HTML: :width 50% :height
   file:images/posts/usbip/file_manager.png

   Use the device's port number to detach the device,
   #+BEGIN_SRC shell -n
     sudo usbip port
     Imported USB devices
     ====================
     Port 00: <Port in Use> at High Speed(480Mbps)
            Seagate RSS LLC : Backup Plus Slim (0bc2:ab21)
            5-1 -> usbip://192.168.0.162:3240/1-1.2
                -> remote bus/dev 001/004
   #+END_SRC

   Detach
   #+BEGIN_SRC shell -n
     # Syntax: usbip detach --port/-p <PORT_NUMBER>
     sudo usbip detach -p 00
     usbip: info: Port 0 is now detached!
   #+END_SRC

#+INCLUDE: "../disquss.inc"
